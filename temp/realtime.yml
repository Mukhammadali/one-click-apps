captainVersion: 4
services:
  $$cap_appname-realtime:
    image: supabase/realtime:$$cap_realtime_version
    restart: unless-stopped
    environment:
        PORT: 4000
        DB_HOST: srv-captain--$$cap_appname-db
        DB_PORT: 5432
        DB_USER: $$cap_pg_user
        DB_PASSWORD: $$cap_pg_pass
        DB_NAME: $$cap_pg_db
        DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
        DB_ENC_KEY: supabaserealtime
        API_JWT_SECRET: $$cap_jwt_secret
        SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
        ERL_AFLAGS: -proto_dist inet_tcp
        ENABLE_TAILSCALE: "false"
        DNS_NODES: "''"
    caproverExtra:
        containerHttpPort: 4000
        dockerfileLines:
          RUN sh -c "/app/bin/migrate && /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && /app/bin/server"
caproverOneClickApp:
  variables:
      # shared env
      - id: $$cap_jwt_secret
        label: JWT secret
        defaultValue: $$cap_gen_random_hex(32)
        validRegex: /^([^\s^\/])+$/
      
        # postgres variables
      - id: $$cap_db_version
        label: Postgres Version
        defaultValue: '14.1.0.106'
        description: Check out their Docker page for the valid tags https://hub.docker.com/r/supabase/postgres/tags
        validRegex: /^([^\s^\/])+$/
      - id: $$cap_pg_user
        label: Postgres Username
        defaultValue: 'postgres'
        validRegex: /.{1,}/
      - id: $$cap_pg_pass
        label: Postgres Password
        defaultValue: $$cap_gen_random_hex(64)
        validRegex: /.{1,}/
      - id: $$cap_pg_db
        label: Postgres Default Database
        defaultValue: 'postgres'
        validRegex: /.{1,}/

      # realtime variables
      - id: $$cap_realtime_version
        label: Storage Realtime Version
        defaultValue: 'v2.1.0'
        description: Check out their Docker page for the valid tags https://hub.docker.com/r/supabase/realtime/tags
        validRegex: /^([^\s^\/])+$/
      

  instructions:
      start: >-
          Supabase is an open source Firebase alternative.
      end: >
          Supabase is deployed.
          1. Make sure to enable websocket support inside $$cap_appname-realtime.
          2. You will also have to create a kong.yml inside /var/lib/docker/volumes/captain--$$cap_appname-kong-config/_data
              Check https://github.com/supabase/supabase/blob/master/docker/volumes/api/kong.yml for the example content
              (make sure to edit and add your ANON_KEY, SERVICE_KEY and service url)
          3. # Set $$cap_appname-db instance count to 0
            `docker service scale srv-captain--$$cap_appname-db=0`
          4. Run the following command
            # delete already created database
            `rm -rf /var/lib/docker/volumes/captain--$$cap_appname-db-data/_data/*`
            # clone supabase repo to extract migrations
            `git clone https://github.com/supabase/supabase`
            # copy migrations required for supabase
            `cp supabase/docker/volumes/db/init/* /var/lib/docker/volumes/captain--$$cap_appname-db-init/_data/ && rm -rf supabase`
            # now set instance count for $$cap_appname-db back to 1
            `docker service scale srv-captain--$$cap_appname-db=1`
            # once database is started, set wal_level to logical and restart database again
            `echo "wal_level = 'logical'" >> /var/lib/docker/volumes/captain--$$cap_appname-db-data/_data/postgresql.conf`
  displayName: Supabase
  isOfficial: true
  description: Supabase is an open source Firebase alternative.
  documentation: Taken from https://github.com/supabase/supabase